[
{
	"uri": "/1-introduction/1.1-vpcendpoint/",
	"title": "AWS VPC Endpoint Introduction",
	"tags": [],
	"description": "",
	"content": "VPC Endpoint Introduction A VPC endpoint enables customers to privately connect to supported AWS services and VPC endpoint services powered by AWS PrivateLink. Traffic between an Amazon VPC and a service does not leave the Amazon network.\nVPC endpoints are virtual devices. They are horizontally scaled, redundant, and highly available Amazon VPC components that allow communication between instances in an Amazon VPC and services without imposing availability risks or bandwidth constraints on network traffic.\n1. Interface endpoints Interface endpoints enable connectivity to services over AWS PrivateLink. These services include some AWS managed services, services hosted by other AWS customers and partners in their own Amazon VPCs (referred to as endpoint services), and supported AWS Marketplace partner services.\nAn interface endpoint is a collection of one or more elastic network interfaces with a private IP address that serves as an entry point for traffic directed towards a supported service.\nAs VPC interface endpoints utilize PrivateLink, you\u0026rsquo;ll be charged for those endpoints by the hour and by the introduced data transfer.\n2. Gateway endpoints A gateway endpoint targets specific IP routes in an Amazon VPC route table, in the form of a prefix-list, used for traffic destined to Amazon DynamoDB or Amazon Simple Storage Service (Amazon S3).\nGateway endpoints do not enable AWS PrivateLink. Gateway endpoints don\u0026rsquo;t introduce any additional costs.\nExample: The application resides in a private subnet and only requires access to Amazon S3. In this situation, we can use a VPC endpoint to maintain the application\u0026rsquo;s strict privacy while still granting it access to our files in S3. This eliminates the need for a NAT gateway in a public subnet and also removes the necessity to redirect traffic through the internet gateway.\nDifferences between 2 endpoint services Instances in an Amazon VPC do not require public IP addresses to communicate with VPC endpoints, as interface endpoints use local IP addresses within the consumer Amazon VPC.\nGateway endpoints are destinations that are reachable from within an Amazon VPC through prefix-lists within the Amazon VPCâ€™s route table.\nConnectivity to AWS services using VPC endpoints Comparision Benefits of VPC Endpoints 1. Potentially Lower Latency Routing traffic through the public internet introduces the possibility of increased latency. However, if all traffics remain within the AWS network, the latency can be reduced.\n2. Reduced Data Fees If you rely on a managed NAT Gateway, AWS charges data processing fees for egress traffic. This cost can be particularly significant when dealing with vast amounts of data, like at Amazon S3.\n3. Less Attacking Surface and Security Risks When accessing your customer\u0026rsquo;s data stored in DynamoDB from within your application, it is of utmost importance to ensure that the traffic remains within the AWS network. Allowing the data to leave the AWS network poses a significant security risk that could compromise the confidentiality and integrity of the information.\n4. Enhanced Compliance and Governance Depending on your industry or regulatory requirements, using public internet routing may not meet compliance standards. VPC endpoints offer a more controlled and compliant environment for accessing AWS services.\n"
},
{
	"uri": "/3-createserviceendpoint/3.1-createnlb/",
	"title": "Create Network Load Balancer",
	"tags": [],
	"description": "",
	"content": "In this step you create a Network Load Balancer and point the traffic to the Provider instances.\nCreate Network Load Balancer Navigate to AWS EC2 Management Console.\nIn the navigation pane, scroll down to Load Balancers under Load Balancing section and choose Create load balancer\nIn Compare and select load balancer type page, choose Network Load Balancer.\nIn the Create Network Load Balancer page, under Basic configuration section:\nFor the Load balancer name field, enter: ProviderNLB For the Scheme field, choose Internal For the IP address type choose IPv4 In the Network mapping section:\nFor the VPC field, choose Provider VPC. For the Mappings field, tick on the first 2 Availability Zone, in my case they were: us-west-2a (usw2-az1) \u0026amp; us-west-2b (usw2-az2). Choose the provider-sg Security Group in the Security groups section.\nUnder the Listeners and routing section, we will have to create a target group.\nIn the Create target group page, choose target type: Instances\nNext:\nFor the Target group name field, enter: ProviderTargetGroup. For the Protocol : Port field, leave it as default. For the IP address type, choose IPv4. For the VPC field, choose Provider VPC. For the Protocol version, choose HTTP1. Next, for the Health checks section, use the default values. Choose Next to continue.\nIn the Register targets, tick on 2 Provider instances and choose Include as pending below.\n2 private instaces will appear in the Targets list. To finish, click Create target group button.\nYou then will ses the information of newly created target group.\nReturn to the Create Network Load Balancer page, you can select the target group you created in the Listeners and routing section.\nScroll down to the Review section, review all of the information again then click on Create load balancer button.\nYour Network Load Balancer is being provisoned. This process may take around 3 minutes.\nWhen your Network Load Balancer is ready, its Status will change to active.\nIn the Security tab, choose Edit.\nUnder the Security setting section, uncheck the option Enforce inbound rules on PrivateLink traffic\nNow return to the information page of the NLB, coppy the DNS name of your NLB. We will validate it in the next step. Verify the Network Load Balancer We will verify the configuration using the Provider Bastion instance.\nNavigate to AWS EC2 Management Console.\nSSH to the Provider Bastion instace using the public IPv4 address and the key pair you created before.\nIn the terminal, use the curl command with the DNS name you copied to check 2 provider instances: curl \u0026lt;NLB name\u0026gt;.elb.us-west-2.amazonaws.com\nYou will see that both servers return the results as Step 2.\n"
},
{
	"uri": "/5-crossregion/5.1-setupendpoint/",
	"title": "Create VPC Endpoint",
	"tags": [],
	"description": "",
	"content": "\nCreate new VPC for the Endpoint Navigate to AWS VPC Manager Management Console.\nIn the navigation pane, select Your VPCs and then click on Create VPC.\nIn the Create VPC page:\nFor Resources to create option, select VPC only. Enter Name tag as ProviderPeeringVPC Set IPv4 CIDR to 10.10.0.0/16 Then choose Create VPC\nAfter creating this VPC, you will see the detail information of it.\nCreate Subnet In the navigation pane, select Subnets and then click on Create subnet. In the Create subnet page:\nChoose the ProviderPeeringVPC VPC Next, move to Subnet Settings:\nFor Subnet name, enter PrivatePeeringSubnet For Availability Zone, choose the first AZ appear. For me, it was us-west-2a For IPv4 CIDR block enter 10.10.1.0/24 Select Create subnet to finish. When it complete, you will see the detail information of it.\nCreate Route Table In the navigation pane, select Route tables and then click on Create route table.\nIn the Create route table page:\nFor Name, enter PrivatePeeringRouteTable For VPC, choose ProviderPeeringVPC Choose Create route table to complete. When it complete, you will see the detail information of this route table.\nNow, let\u0026rsquo;s associate this route table to a subnet. Click on Action and choose Edit subnet associations\nIn the Edit subnet associations page, choose the PrivatePeeringSubnet subnet. Choose Save associations to save.\nNow you can see the subnet you associated in the Subnet associations tab.\nCreate Security Group In the navigation pane, select Security groups and then click on Create security group.\nIn the Create route table page:\nFor Name, enter PrivatePeeringSG For Description, enter Allow traffic to port 80 For VPC, choose ProviderPeeringVPC. In the Inbound rules section:\nFor Port range, enter 80 For Source, enter 0.0.0.0/0 Then, scroll down and choose Create security group to finish.\nYou will see the information of this security group like this.\nCreate Endpoint Navigate to AWS VPC Manager Management Console.\nIn the navigation pane, choose Endpoints. Then choose Create endpoint.\nIn the Create endpoint page:\nFor Name tag, enter: provider-peering-endpoint For Service category, choose Other endpoint services. For Service name, enter the name of the endpoint service, and choose Verify service. Next:\nFor VPC, select ProviderPeeringVPC to create the endpoint. For Subnets, select the first subnets in the ProviderPeeringVPC VPC. For IP address type, choose IPv4. This option will assign IPv4 addresses to your endpoint network interfaces. Next:\nFor Security group, select the security groups to associate with the endpoint network interfaces, in this case choose the PrivatePeeringSG. Choose Create endpoint to finish.\nYou will see that your endpoint has Pending acceptance status.\nAccept connection request Navigate to AWS VPC Manager Management Console in a new tab.\nUnder Virtual Private Cloud section in the navigation pane, choose Endpoint services.\nSelect the endpoint service provider-endpoint-service.\nFrom the Endpoint connections tab (1), choose the Endpoint connection request appear in your console (2), then choose Actions (3), Accept endpoint connection request (4).\nWhen prompted for confirmation, enter accept and then choose Accept.\nReturn to Endpoints, you will see the endpoint you created has the status Available.\n"
},
{
	"uri": "/3-createserviceendpoint/3.2-createvpcserviceendpoint/",
	"title": "Create VPC Service Endpoint",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint Service Navigate to AWS VPC Manager Management Console.\nUnder Virtual Private Cloud section in the navigation pane, choose Endpoint services.\nIn the Create endpoint service page:\nFor the Name field, enter provider-endpoint-service For Load balancer type, choose Network In the Available load balancers section, select ProviderNLB to associate with the endpoint service. In the Additional settings section:\nChoose IPv4 for the field Supported IP address types. Then choose Create You will see the information of you Endpoint Service like below\nCopy and note the Service Name. We will use it in the next step.\n"
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction AWS VPC Endpoint and PrivateLink are services designed to enhance security and simplify connectivity within your AWS Virtual Private Cloud (VPC) environment.\nAWS VPC Endpoint allows you to privately connect your VPC to supported AWS services, such as Amazon S3, DynamoDB, or other services hosted on AWS, without the need for an internet gateway, NAT device, or VPN connection. This enables secure and efficient communication between your VPC resources and AWS services using private IP addresses.\nPrivateLink, on the other hand, extends this capability beyond AWS services to privately connect your VPC with services hosted by other AWS customers or partners. PrivateLink provides a secure and scalable way to access these services over private connections, avoiding exposure to the public internet and ensuring data privacy and compliance.\nTogether, AWS VPC Endpoint and PrivateLink offer robust networking solutions for building secure and isolated architectures within AWS, facilitating seamless connectivity between resources while maintaining strong security controls.\nOverview architechture Content VPC Endpoint PrivateLink "
},
{
	"uri": "/",
	"title": "Securely access services host in AWS over AWS PrivateLink and VPC Enpoint",
	"tags": [],
	"description": "",
	"content": "Overview In this lab, you\u0026rsquo;ll learn how to create VPC Endpoint Service to share your service that\u0026rsquo;s hosted in AWS with other AWS customers, and how those customers connect to your service through AWS private network.\nContent Introduction Preparation Create VPC Service Endpoint Create VPC Endpoint Inter-region Endpoint Clean up resources "
},
{
	"uri": "/4-createendpoint/4.1-setupconsumerstack/",
	"title": "Setup the Consumer stack",
	"tags": [],
	"description": "",
	"content": "Setup Consumer Instances In this step, we will set up Consumer stack through CloudFormation. You can access and download the YAML template from the following link.\nTemplate: https://cf-templates-4ocge7m5gjvs-us-west-2.s3.us-west-2.amazonaws.com/consumer.yaml\nNavigate to CloudFormation Management Console\nClick on Stack and choose Create stack with the option With new resources (Standard)\nIn the Create stack page:\nFor the Prepare template field, choose Choose an existing template For the Template source field, choose Amazon S3 URL. In the Amazon S3 URL field, enter the S3 URL above. Click Next to continue. In the Specify stack details page:\nIn the field Stack name, enter ConsumerStack. In the field Key name, choose the key pair we created before: fcj_ws2_keypair. Remember to check if there are any VPC in this region claim the VPC CIDR block 10.2.0.0/16 (You can change the CIDR block) Click Next to continue. In the Configure stack options page, we will use the default options and values. Scroll down and choose Next\nIn the Review and create page, review all of the values again. Scroll down and choose Submit to create your stack.\nWait until CloudFormation finishes creating your stack.\n"
},
{
	"uri": "/1-introduction/1.2-privatelink/",
	"title": "AWS PrivateLink Introduction",
	"tags": [],
	"description": "",
	"content": "AWS PrivateLink Introduction AWS PrivateLink provides secure, private connectivity between Amazon VPCs, AWS services, and on-premises applications on the AWS network.\nAWS PrivateLink also allows customers to create an application in their Amazon VPC, referred to as a service provider VPC, and offers that application as an AWS PrivateLink-enabled service or VPC endpoint service. A VPC endpoint service lets customers host a service and have it accessed by other consumers using AWS PrivateLink.\nPrior to the availability of AWS PrivateLink, services residing in a single Amazon VPC were connected to multiple Amazon VPCs either:\nThrough public IP addresses using each VPCâ€™s internet gateway By private IP addresses using VPC peering. With AWS PrivateLink, service connectivity over Transmission Control Protocol (TCP) can be established from the service providerâ€™s VPC to the service consumersâ€™ VPCs in a secure and scalable manner.\nAWS PrivateLink provides the following three main benefits:\nUse private IP addresses for traffic: Provides Amazon VPCs with a secure and scalable way to privately connect to AWS-hosted services. Traffic does not use public internet protocols (IP) addresses. Uses private IP addresses and security groups within an Amazon VPC so that services function as though they were hosted directly within an Amazon VPC. Simplify network management: Avoid both security policies that limit benefits of internet gateways and complex networking across a large number of Amazon VPCs. Allows for connectivity to services across different accounts and Amazon VPCs with no need for route table modifications. Facilitate your cloud migration Gives on-premises networks private access to AWS services via AWS Direct Connect. How does AWS PrivateLink work? AWS PrivateLink uses Network Load Balancers to connect interface endpoints to services. A Network Load Balancer functions at the network transport layer (layer 4) and can handle millions of requests per second. In the case of AWS PrivateLink, it is represented inside the consumer Amazon VPC as an endpoint network interface.\nCustomers can specify multiple subnets in different Availability Zones to ensure that their service is resilient to an Availability Zone service disruption. To achieve this, they can create endpoint network interfaces in multiple subnets mapping to multiple Availability Zones.\nAn endpoint network interface can be viewed in the account, but customers cannot manage it themselves.\n"
},
{
	"uri": "/4-createendpoint/4.2-createvpcendpoint/",
	"title": "Create VPC Endpoint",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint Navigate to AWS VPC Manager Management Console.\nIn the navigation pane, choose Endpoints. Then choose Create endpoint.\nIn the Create endpoint page:\nFor Name tag, enter: provider-endpoint For Service category, choose Other endpoint services. For Service name, enter the name of the service you copied previously, and choose Verify service. Next:\nFor VPC, select Consumer VPC to create the endpoint. For Subnets, select the 2 subnets in the Consumer VPC. For IP address type, choose IPv4. This option will assign IPv4 addresses to your endpoint network interfaces. For Security group, select the security groups to associate with the endpoint network interfaces, in this case choose the Consumer-sg. Choose Create endpoint.\nAccept endpoint connection request Navigate to AWS VPC Manager Management Console.\nUnder Virtual Private Cloud section in the navigation pane, choose Endpoint services.\nSelect the endpoint service provider-endpoint-service.\nFrom the Endpoint connections tab (1), choose the Endpoint connection request appear in your console (2), then choose Actions (3), Accept endpoint connection request (4).\nWhen prompted for confirmation, enter accept and then choose Accept.\nThe the status of that endpoint will change to Available.\nReturn to Endpoints, you will see the endpoint you created has the status Available.\nNote and copy one of the DNS names of the endpoint, we will verify it in the next step.\nVerify the endpoint Navigate to AWS EC2 Management Console.\nYou will see the list of running instances, select the Consumer Bastion instance.\nSSH to the Consumer Bastion instace using the public IPv4 address and the key pair you created before.\nIn the terminal, use the curl command with the DNS name you copied to check: curl vpce-*****.\u0026lt;region\u0026gt;.vpce.amazonaws.com\nThe curl command will return the same result as the previous step. Now, let\u0026rsquo;s ssh to the private instance, the real consumer.\nReturn to the EC2 dashboard and choose the Consumer instance. Note the private ip of this instance.\nReturn to the command line of the Consumer bastion host, we have to create a key to ssh to the private instance. Copy the content of the key file fcj_ws2_keypair you download before. Then create a key file name sshkey.pem in your consumer bastion instance and paste the content of the key you copied to this file. Change the permission of the sshkey.pem if needed. Then ssh using the command: ssh -i \u0026lt;key file name\u0026gt; ec2-user@\u0026lt;private ip\u0026gt;\nWhen you successfully ssh to the Consumer instance, use the curl command like step 4 to check the endpoint.\nNow both public and private instance without can call the endpoint we created and return the result as expected.\n"
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rTo save your time, I have already prepare a CloudFormation Stack to set up a simple architecture.\nIntroduction In this step, we will construct an architecture as described below:\nIn this workshop, we\u0026rsquo;ll employ two EC2 instances serving as simple HTTP servers, acting as our service providers. These instances reside within private subnets across two distinct Availability Zones. To equip both EC2 instances with necessary packages and libraries, they require public internet access. Hence, we\u0026rsquo;ll incorporate a NAT Gateway along with an entry to this gateway within the private route table.\nOur NAT Gateway has been established within the same public subnet as the bastion host â€” an EC2 instance utilized for validating the functionality of our service providers. To ensure smooth execution of our tests later on, we\u0026rsquo;ve configured appropriate Ingress rules within the security groups for both the private and public EC2 instances. Specifically, the security group for the private subnet allows traffic from within the VPC CIDR block to access port 80. Meanwhile, the security group for the public EC2 instance facilitates SSH access by opening port 22, enabling us to connect to the bastion host.\n1. Create a SSH key pair Navigate to AWS EC2 Management Console.\nOn the left navigation, scroll down to Key Pair under Network \u0026amp; Security and choose Create key pair\nIn the Create key pair page:\nFor the Name field, enter fcj_ws2_keypair. For the Key pair type, choose RSA. For the Private key file format, choose .pem Choose Create key pair to finish. Remember to save your private key file to your local machine for later use. You can see your key in the Key pairs list.\n2. Setup the base architecture CloudFormation will deploy the stack in the current region. Please ensure you switch to the region where you created your SSH key pair before proceeding to the next step.\nIn this step, we will construct an architecture as described above using CloudFormation. You can access and download the YAML template from the following link.\nTemplate: https://cf-templates-4ocge7m5gjvs-us-west-2.s3.us-west-2.amazonaws.com/provider.yaml\nNavigate to CloudFormation Management Console\nClick on Stack and choose Create stack with the option With new resources (Standard)\nIn the Create stack page:\nFor the Prepare template field, choose Choose an existing template (1) For the Template source field, choose Amazon S3 URL (2) In the Amazon S3 URL field, enter the S3 URL above. (3) Click Next to continue. (4) In the Specify stack details page:\nIn the field Stack name, enter ProviderStack. (1) In the field Key name, choose the key pair we created before: fcj_ws2_keypair (2) Remember to check if there are any VPC in this region claim the VPC CIDR block 10.1.0.0/16 (You can change the CIDR block) Click Next to continue. (3) In the Configure stack options page, we will use the default options and values. Scroll down and choose Next\nIn the Review and create page, review all of the values again. Scroll down and choose Submit to create your stack.\nWhen CloudFormation create your stack. You can choose the Resources tab to watch your resources being created. Please note that the preparation process may require approximately 5 to 10 minutes to complete.\nWhen the creation process complete, you can check the output at the Output tab.\n3. Validate 2 provider instances Now let\u0026rsquo;s check our Provider EC2 instances!\nNavigate to AWS EC2 Management Console.\nOn the left navigation, scroll down to Instances under Instances. Wait for 3 EC2 instaces until they are in a running state.\nCheck the information of 2 provider instance named Provider Instance 1 and Provider Instance 2. Note the private IPv4 address of these instaces.\nProvider1 Private IPv4 Address: 10.1.1.65 Provider2 Private IPv4 Address: 10.1.2.60 Check the information of the instance named Bastion. Note the public IPv4 address of this instace.\nSSH to that instace using the public IPv4 address and the key pair you created before. Refer to this guide: Connecto to Amazon Linux\nIn the terminal, use the curl command to check 2 provider instances: curl http://\u0026lt;private IPv4 address\u0026gt;:80\nYou will see that both servers return the result as we expected.\n"
},
{
	"uri": "/5-crossregion/5.2-setupconsumerstack/",
	"title": "Setup the Consumer stack in a different region",
	"tags": [],
	"description": "",
	"content": "\rRemember to switch to the different region before taking the following step. For example, I switch to us-east-2.\nCreate keypair in new region Navigate to AWS EC2 Management Console.\nOn the left navigation, scroll down to Key Pair under Network \u0026amp; Security and choose Create key pair\nIn the Create key pair page:\nFor the Name field, enter fcj_ws2_keypair_ohio. For the Key pair type, choose RSA. For the Private key file format, choose .pem Choose Create key pair to finish. Remember to save your private key file to your local machine for later use. You can see your key in the Key pairs list.\nSetup Consumer Instances in new region In this step, we will set up Consumer stack through CloudFormation in a new region.\nTemplate: https://cf-templates-4ocge7m5gjvs-us-west-2.s3.us-west-2.amazonaws.com/consumer_Ohio.yaml\nNavigate to CloudFormation Management Console\nClick on Stack and choose Create stack with the option With new resources (Standard)\nIn the Create stack page:\nFor the Prepare template field, choose Choose an existing template For the Template source field, choose Amazon S3 URL. In the Amazon S3 URL field, enter the S3 URL above. Click Next to continue. In the Specify stack details page:\nIn the field Stack name, enter ConsumerStackOhio. In the field Key name, choose the key pair we created before: fcj_ws2_keypair. Remember to check if there are any VPC in this region claim the VPC CIDR block 10.2.0.0/16 (You can change the CIDR block) Click Next to continue. In the Configure stack options page, we will use the default options and values. Scroll down and choose Next\nIn the Review and create page, review all of the values again. Scroll down and choose Submit to create your stack.\nWait until CloudFormation finishes creating your stack. "
},
{
	"uri": "/3-createserviceendpoint/",
	"title": "Create VPC Endpoint Service",
	"tags": [],
	"description": "",
	"content": "Introduction AWS VPC Endpoint Service enables you to privately expose your own services or applications running within your Virtual Private Cloud (VPC) to other AWS accounts or VPCs without exposing them to the public internet.\nWith VPC Endpoint Service, you can create and manage your own service endpoints that are accessed through AWS PrivateLink. This allows consumers in different accounts or VPCs to securely connect to your service using private IP addresses, ensuring data privacy and reducing exposure to external threats.\nBy leveraging VPC Endpoint Service, you can extend the reach of your services and offer them as secure endpoints for consumption by other AWS resources, partners, or customers, all while maintaining a private and controlled networking environment within AWS.\nEndpoint services require either a Network Load Balancer or a Gateway Load Balancer. The load balancer receives requests from service consumers and routes them to your service. In this workshop, you\u0026rsquo;ll create an endpoint service using a Network Load Balancer\nNetwork Load Balancer (NLB): A Network Load Balancer operates at the transport layer (Layer 4) of the Open Systems Interconnection (OSI) model. It is capable of handling millions of requests per second. When the load balancer receives a connection request, it selects a target from the target group based on the default rule and attempts to establish a TCP connection with the selected target using the port specified in the listener configuration.\nTarget Group: A target group directs requests to registered targets, like EC2 instances, using specified protocols and port numbers. Network Load Balancer target groups support TCP, UDP, TCP_UDP, and TLS protocols. You can register a target with multiple target groups and configure health checks specific to each target group. Health checks are conducted on all targets registered with a target group referenced in a listener rule for your load balancer.\nContent Create Network Load Balancer Create VPC Endpoint Service "
},
{
	"uri": "/5-crossregion/5.3-vpcpeering/",
	"title": "Create VPC Peering",
	"tags": [],
	"description": "",
	"content": "\nCreate Peering Connection Navigate to AWS VPC Manager Management Console.\nIn the navigation pane, choose Peering connections. Remember to switch to the region that hosted the service provider. In my case, it was Oregon.\nChoose Create peering connections to continue.\nIn the Create peering connection page:\nFor Name, enter CrossRegionPeering For VPC ID, select ProviderPeeringVPC Next, in the Select another VPC to peer with section:\nSelect Another Region For Region, select the region you create your consumer stack in the previous step. For me, it was US East (Ohio) (us-east-2) Enter the VPC ID of the VPC you need to peer. Choose Create peering connection to finish. You can find the VPC ID in the detail information page of that VPC. 6. Open a new tab and navigate to AWS VPC Manager Management Console in Ohio (us-east-2).\n7. You will see a Peering request that is in Pending acceptance state.\n8. Choose that pending Peering connection, then click on the Action, you will see the option Accept request\n9. A window will pop up and ask you to Accept the peering request.\n10. Return to the peering connection in the region hosted provider service. 11. In the detail information page of the peering connection, choose Edit DNS settings\n12. In the Edit DNS settings page, check the option Allow accepter VPC to resolve DNS of requester VPC hosts to private IP and choose Save changes.\n13. Similarly, move to Peering connection in Ohio and choose Edit DNS settings.\n14. In the Edit DNS settings page, check the option Allow accepter VPC to resolve DNS of requester VPC hosts to private IP and choose Save changes.\nVPC Peering 15. After you done, you will get the result as bellow.\nVPC Peering\nEdit route table Navigate to AWS VPC Manager Management Console.\nIn the navigation pane, select Route tables. Then select the route table PrivatePeeringRouteTable you created before.\nIn the Routes tab, choose Edit routes.\nAdd a new entry with the following information:\nDestination: 10.2.0.0/16 (CIDR block of the VPC in Ohio (us-east-2)) Target: Peering Connection and choose the peering connection named CrossRegionPeering. To finish, choose Save changes Now, open VPC dashboard in a new tab and change to Ohio (us-east-2). Then choose the route table named Consumer Private Routes (AZ1). In the Routes tab, choose Edit routes.\nAdd a new entry with the following information:\nDestination: 10.10.0.0/16 (CIDR block of the VPC hosted the endpoint in Oregon (us-west-2)) Target: Peering Connection and choose the peering connection that appear. To finish, choose Save changes The configuration is now completed!!! Next let\u0026rsquo;s validate it.\n"
},
{
	"uri": "/4-createendpoint/",
	"title": "Create VPC Endpoint in the same region",
	"tags": [],
	"description": "",
	"content": "Introduction Content Create Consumer Stack Create VPC Endpoint "
},
{
	"uri": "/5-crossregion/5.4-verifytheconfig/",
	"title": "Verify the configuration",
	"tags": [],
	"description": "",
	"content": "Verify our configuration Navigate to AWS EC2 Management Console in Ohio (us-east-2).\nYou will see the list of running instances, select the Consumer Instance instance. Check the information and note the private IP address of this instance.\nSelect the Consumer Bastion instance, you will see the information of this instance. Use the public IPv4 to SSH to the bastion or you can use Instance connect.\nIn the bastion terminal, firstly, let\u0026rsquo;s check the endpoint dns by using nslookup and curl command. The bastion host can resolve the dns of the endpoint throug nslookup but can not communicate with it using curl. Because we create the was no entry of the private ip of the endpoint dns name in the public route table. (we only create an entry to peering connection in the private route table)\nNow, create sshkey.pem file to ssh to the private instance - the real consumer.\nSSH to the private instance using the private ip address from step 2.\nNow, using curl command to check the DNS name of the VPC endpoint we created before.\nAs you can see, our real consumer can communicate with the endpoint and return results.\n"
},
{
	"uri": "/5-crossregion/",
	"title": "Inter-Region access to endpoint services",
	"tags": [],
	"description": "",
	"content": "Introduction Content Set up new VPC Endpoint Create VPC Endpoint Service Create VPC Peering Verify the configuration "
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nRemove peering connection in route tables Navigate to AWS VPC Manager Management Console in Oregon.\nIn the navigation pane, select Route tables. Then select the route table PrivatePeeringRouteTable you created before.\nIn the Routes tab, choose Edit routes.\nIn the Edit routes page, choose Remove to delete the entry to peering connection. The route table after deleting an entry.\nSimilarly, we delete the entry to peering connection in the route table Consumer Private Routes (AZ1) in Ohio (us-east-2)\nThe route table after deleting an entry.\nRemove peering connection Navigate to AWS VPC Manager Management Console.\nIn the navigation pane, choose Peering connections. Remember to switch to the region that hosted the service provider. In my case, it was Oregon (us-west-2). Select the CrossRegionPeering connection. Then, click on Actions and choose Delete peering connection. The peering connection in Ohio (us-east-2) will be removed automatically.\nType delete to confirm deletion.\nThe peering connection in Ohio (us-east-2) is in Deleted state then.\nDelete Security Group Access AWS VPC Manager Management Console On the left navigation bar, select Security Groups Select Security Group named ProviderPeeringVPC. Click Actions. Click Delete security groups. Click Delete Delete subnet Access AWS VPC Manager Management Console In the navigation pane, select Subnets. Select subnet named PrivatePeeringSubnet Click Actions. Click Delete subnet. Type delete to confirm and click Delete. Delete VPC Access AWS VPC Manager Management Console In the navigation pane, select Your VPCs. Select the VPC named ProviderPeeringVPC. In the prompt, type delete to confirm deletion and click Delete. (This action will delete route table, security group create in this VPC) Remove VPC Endpoint Navigate to AWS VPC Manager Management Console. In the navigation pane, choose Endpoints. Select the endpoints you created in this lab. Click Actions then choose Delete VPC endpoints. In the prompt, type delete to confirm deletion. Remove VPC Endpoint Service Navigate to AWS VPC Manager Management Console. In the navigation pane, choose Endpoint services. Select the all of the endpoint services you created. Click Actions. Click Delete endpoint services. Type delete to confirm and click Delete. Delete Load Balancer Navigate to AWS EC2 Management Console. In the navigation pane, scroll down to Load Balancers under Load Balancing section. Select the network balancer you created. Click Actions. Click Delete load balancer. Type confirm to confirm and click Delete. Remove target group Navigate to AWS EC2 Management Console. In the navigation pane, scroll down to Target Groups under Load Balancing section. Select the target group you created. Click Actions. Click Delete. Click Yes, delete. Destroy CloudFormation stack Remove Consumer stack in Ohio (us-east-2):\nAccess AWS EC2 Management Console.\nIn the left sidebar, select Stacks. In turn, tick the CloudFormation Stack related to the lab and select Delete.\nIn the prompt, select Delete stack.\nWait a few minutes until CloudFormation clears all resources.\nRemove Consumer stack in Oregon (us-west-2)\nAccess AWS EC2 Management Console. In the left sidebar, select Stacks. In turn, tick the CloudFormation Stack related to the lab and select Delete. In the prompt, select Delete stack. Wait a few minutes until CloudFormation clears all resources. "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]